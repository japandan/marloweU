==========================Starting Build Database===============================
Processed files in 'data/RData', found 9 RData files
==========================Starting Build Database===============================
Processed files in 'data/RData', found 9 RData files
==========================Starting Build Database===============================
Processed files in 'data/RData', found 9 RData files
Deleted the existing database, started at 2022-10-20 10:04:11, and finished at 2022-10-20 10:04:20, took a total duration of 8.448731 seconds
Created the new database datamodel, started at 2022-10-20 10:04:20, and finished at 2022-10-20 10:04:25, took a total duration of 5.578811 seconds
==========================Starting Organism Population===============================
==========================Starting Build Database===============================
==========================Starting Build Database===============================
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 10:08:28, and finished at 2022-10-20 10:08:29, took a total duration of 1.062955 seconds
Created the new database datamodel, started at 2022-10-20 10:08:29, and finished at 2022-10-20 10:08:34, took a total duration of 5.421242 seconds
==========================Starting Organism Population===============================
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 10:11:01, and finished at 2022-10-20 10:11:02, took a total duration of 1.047193 seconds
Created the new database datamodel, started at 2022-10-20 10:11:02, and finished at 2022-10-20 10:11:08, took a total duration of 5.54367 seconds
==========================Starting Organism Population===============================
Started processing 9913 with 23844 proteins, 1 enzymes, 1 db_links, and 782592 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 85681 with 24934 proteins, 1 enzymes, 1 db_links, and 662892 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 2711 with 28128 proteins, 1 enzymes, 1 db_links, and 633561 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 29159 with 25998 proteins, 1 enzymes, 1 db_links, and 765394 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 6565 with 33719 proteins, 1 enzymes, 1 db_links, and 1203116 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 3988 with 31219 proteins, 1 enzymes, 1 db_links, and 680351 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 296 with 4324 proteins, 1 enzymes, 1 db_links, and 87078 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 8040 with 35973 proteins, 1 enzymes, 1 db_links, and 1344413 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Started processing 83558 with 1052 proteins, 1 enzymes, 1 db_links, and 23182 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
cl <- makeCluster(2)

[[17]]
h(simpleError(msg, call))

<simpleError in makeCluster(2): could not find function "makeCluster">
Populated 9 organisms into the database, started at 2022-10-20 10:11:08, and finished at 2022-10-20 10:11:24, took a total duration of 16.22932 seconds
==========================Starting Data Analysis===============================
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
out <- tryCatch({
    withCallingHandlers(process_strong(conn, core_count = core_count, split_size = split_size, tolerance = strong_tolerance)
                        ,error=function(e) {print(sys.calls())}
                        ,warning=function(w) {print(sys.calls())
                          invokeRestart("muffleWarning")}
    )
  },
  error = function(m) { print(m) }
  )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(process_strong(conn, core_count = core_count, split_size = split_size, tolerance = strong_tolerance)
                        ,error=function(e) {print(sys.calls())}
                        ,warning=function(w) {print(sys.calls())
                          invokeRestart("muffleWarning")}
    )

[[11]]
withCallingHandlers(process_strong(conn, core_count = core_count, split_size = split_size, tolerance = strong_tolerance)
                        ,error=function(e) {print(sys.calls())}
                        ,warning=function(w) {print(sys.calls())
                          invokeRestart("muffleWarning")}
    )

[[12]]
cl <- makeCluster(core_count)

[[13]]
h(simpleError(msg, call))

<simpleError in makeCluster(core_count): could not find function "makeCluster">
Generated strong peptide data, started at 2022-10-20 10:11:24, and finished at 2022-10-20 10:11:24, took a total duration of 0.3331573 seconds
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
out <- tryCatch({
    withCallingHandlers(process_overlap(conn,core_count = core_count, split_size = split_size, file_output = log_filename)
                        ,error=function(e) {print(sys.calls())}
                        ,warning=function(w) {print(sys.calls())
                          invokeRestart("muffleWarning")}
    )
  },
  error = function(m) { print(m) }
  )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(process_overlap(conn,core_count = core_count, split_size = split_size, file_output = log_filename)
                        ,error=function(e) {print(sys.calls())}
                        ,warning=function(w) {print(sys.calls())
                          invokeRestart("muffleWarning")}
    )

[[11]]
withCallingHandlers(process_overlap(conn,core_count = core_count, split_size = split_size, file_output = log_filename)
                        ,error=function(e) {print(sys.calls())}
                        ,warning=function(w) {print(sys.calls())
                          invokeRestart("muffleWarning")}
    )

[[12]]
cl <- makeCluster(core_count)

[[13]]
h(simpleError(msg, call))

<simpleError in makeCluster(core_count): could not find function "makeCluster">
Generated overlap coefficient data, started at 2022-10-20 10:11:24, and finished at 2022-10-20 10:11:24, took a total duration of 0.1163318 seconds
Created index for peptide_map table, started at 2022-10-20 10:11:24, and finished at 2022-10-20 10:11:25, took a total duration of 0.2153895 seconds
Optimized the database, started at 2022-10-20 10:11:24, and finished at 2022-10-20 10:11:25, took a total duration of 0.2851567 seconds
====Full Build of database, started at 2022-10-20 10:11:24, and finished at 2022-10-20 10:11:25, took a total duration of 23.55482 seconds====
Error in install.packages : Updating loaded packages
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 10:20:14, and finished at 2022-10-20 10:20:16, took a total duration of 1.762432 seconds
Created the new database datamodel, started at 2022-10-20 10:20:16, and finished at 2022-10-20 10:20:22, took a total duration of 6.583427 seconds
==========================Starting Organism Population===============================
Started processing 9913 with 23844 proteins, 1 enzymes, 1 db_links, and 782592 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 85681 with 24934 proteins, 1 enzymes, 1 db_links, and 662892 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 2711 with 28128 proteins, 1 enzymes, 1 db_links, and 633561 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 29159 with 25998 proteins, 1 enzymes, 1 db_links, and 765394 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 6565 with 33719 proteins, 1 enzymes, 1 db_links, and 1203116 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 3988 with 31219 proteins, 1 enzymes, 1 db_links, and 680351 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 296 with 4324 proteins, 1 enzymes, 1 db_links, and 87078 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 8040 with 35973 proteins, 1 enzymes, 1 db_links, and 1344413 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 83558 with 1052 proteins, 1 enzymes, 1 db_links, and 23182 peptides
[[1]]
source("~/R/marloweU/R/init_database.linux.R")

[[2]]
withVisible(eval(ei, envir))

[[3]]
eval(ei, envir)

[[4]]
eval(ei, envir)

[[5]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[6]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[7]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[8]]
FUN(X[[i]], ...)

[[9]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[10]]
tryCatchList(expr, classes, parentenv, handlers)

[[11]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[12]]
doTryCatch(return(expr), name, parentenv, handler)

[[13]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[14]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[15]]
upload_organism(conn,organism, max_peptide_length)

[[16]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[17]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[18]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[19]]
staticClusterApply(cl, fun, length(x), argfun)

[[20]]
checkForRemoteErrors(val)

[[21]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[22]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8mb4_general_ci,COERCIBLE) for operation '=' [1267]", 
    base::quote(checkForRemoteErrors(val)))

[[23]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8mb4_general_ci,COERCIBLE) for operation '=' [1267]>
Populated 9 organisms into the database, started at 2022-10-20 10:20:22, and finished at 2022-10-20 10:22:07, took a total duration of 104.9903 seconds
==========================Starting Data Analysis===============================
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 20:56:15, and finished at 2022-10-20 20:56:16, took a total duration of 1.145553 seconds
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 20:57:47, and finished at 2022-10-20 20:57:47, took a total duration of 0.008877039 seconds
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 20:58:27, and finished at 2022-10-20 20:58:28, took a total duration of 0.8231051 seconds
Created the new database datamodel, started at 2022-10-20 20:58:28, and finished at 2022-10-20 20:58:35, took a total duration of 6.991904 seconds
==========================Starting Organism Population===============================
Started processing 9913 with 23844 proteins, 1 enzymes, 1 db_links, and 782592 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 85681 with 24934 proteins, 1 enzymes, 1 db_links, and 662892 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 2711 with 28128 proteins, 1 enzymes, 1 db_links, and 633561 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 29159 with 25998 proteins, 1 enzymes, 1 db_links, and 765394 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 6565 with 33719 proteins, 1 enzymes, 1 db_links, and 1203116 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 3988 with 31219 proteins, 1 enzymes, 1 db_links, and 680351 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 296 with 4324 proteins, 1 enzymes, 1 db_links, and 87078 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 8040 with 35973 proteins, 1 enzymes, 1 db_links, and 1344413 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop(count, " nodes produced errors; first error: ", firstmsg, 
    domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): 2 nodes produced errors; first error: The table 'upload_peptides' is full [1114]>
Started processing 83558 with 1052 proteins, 1 enzymes, 1 db_links, and 23182 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8mb4_general_ci,COERCIBLE) for operation '=' [1267]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: Illegal mix of collations (latin1_swedish_ci,IMPLICIT) and (utf8mb4_general_ci,COERCIBLE) for operation '=' [1267]>
Populated 9 organisms into the database, started at 2022-10-20 20:58:35, and finished at 2022-10-20 21:00:16, took a total duration of 101.2036 seconds
==========================Starting Data Analysis===============================
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 21:04:02, and finished at 2022-10-20 21:04:02, took a total duration of 0.4150069 seconds
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 21:09:31, and finished at 2022-10-20 21:09:31, took a total duration of 0.7905724 seconds
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 21:13:36, and finished at 2022-10-20 21:13:36, took a total duration of 0.05941677 seconds
==========================Starting Build Database===============================
Processed files in 'data', found 9 RData files
Deleted the existing database, started at 2022-10-20 21:34:13, and finished at 2022-10-20 21:34:13, took a total duration of 0.1959743 seconds
Created the new database datamodel, started at 2022-10-20 21:34:13, and finished at 2022-10-20 21:34:19, took a total duration of 5.703664 seconds
==========================Starting Organism Population===============================
Started processing 9913 with 23844 proteins, 1 enzymes, 1 db_links, and 782592 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 85681 with 24934 proteins, 1 enzymes, 1 db_links, and 662892 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 2711 with 28128 proteins, 1 enzymes, 1 db_links, and 633561 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 29159 with 25998 proteins, 1 enzymes, 1 db_links, and 765394 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 6565 with 33719 proteins, 1 enzymes, 1 db_links, and 1203116 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 3988 with 31219 proteins, 1 enzymes, 1 db_links, and 680351 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 296 with 4324 proteins, 1 enzymes, 1 db_links, and 87078 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 8040 with 35973 proteins, 1 enzymes, 1 db_links, and 1344413 peptides
[[1]]
initdb()

[[2]]
build_database( conn=conn_list,
                file_location="data",
                log_filename="initdb.log",
                core_count="8")

[[3]]
tmp <- lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[4]]
lapply(files[1:length(files)], process_one_file, max_peptide_length = max_peptide_length)

[[5]]
FUN(X[[i]], ...)

[[6]]
out <- tryCatch({
        withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )
      },
      error = function(m) { print(m) }
      )

[[7]]
tryCatchList(expr, classes, parentenv, handlers)

[[8]]
tryCatchOne(expr, names, parentenv, handlers[[1L]])

[[9]]
doTryCatch(return(expr), name, parentenv, handler)

[[10]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[11]]
withCallingHandlers(populate_organism(conn,organism_info,max_peptide_length = max_peptide_length)
                            ,error=function(e) {print(sys.calls())}
                            ,warning=function(w) {print(sys.calls())
                              invokeRestart("muffleWarning")}
        )

[[12]]
upload_organism(conn,organism, max_peptide_length)

[[13]]
full_result <- parLapply("cl"=cl, "X" = range_test, "fun" = upload_partial, chunk.size = 1, conn= conn, max_peptide_length = max_peptide_length, organism = organism)

[[14]]
do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...), quote = TRUE)

[[15]]
clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, 
    FUN = fun, ...)

[[16]]
staticClusterApply(cl, fun, length(x), argfun)

[[17]]
checkForRemoteErrors(val)

[[18]]
stop("one node produced an error: ", firstmsg, domain = NA)

[[19]]
.handleSimpleError(function(e) {print(sys.calls())}, "one node produced an error: The table 'upload_peptides' is full [1114]", 
    base::quote(checkForRemoteErrors(val)))

[[20]]
h(simpleError(msg, call))

<simpleError in checkForRemoteErrors(val): one node produced an error: The table 'upload_peptides' is full [1114]>
Started processing 83558 with 1052 proteins, 1 enzymes, 1 db_links, and 23182 peptides
upload of peptides took 2.2 seconds and all other tables took 1.5 seconds total time took 4.2 seconds
upload of Genus(1) in 0.353s, Species(1) in 0.010s, Organisms(1) in 0.055s, Peptides(23031) in 0.849s, Sequences(1052) in 0.479s and Peptide_tags(168699) in 4.130s total time took 5.9 seconds
population of peptide_map(233458) in 9.357s, organisms_to_peptides(23031) in 1.495s and dblinks(1) in 0.372s, proteins(1052) in 0.625s, enzyme(0) in 0.004s, protein_to_dblinks(0) in 0.003s, protein_pathways(0) in 0.003s, protein_modules(0) in 0.002s, peptides_filtered(0) in 0.003s, sequence_to_peptides(23176) in 22.883s, sequence_to_peptides_filtered(0) in 0.004s total time took 26.1 seconds
Started at 2022-10-20 21:35:59, and finished at 2022-10-20 21:36:35, took a total duration of 36.3 seconds
Populated 9 organisms into the database, started at 2022-10-20 21:34:19, and finished at 2022-10-20 21:36:35, took a total duration of 136.3647 seconds
==========================Starting Data Analysis===============================
